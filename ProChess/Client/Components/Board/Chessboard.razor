@for (var row = _verticalAxis.Length - 1; row >= 0; row--)
{
    int localRow = row;

    <div class="row flex-nowrap">
        @for (var column = 0; column < _horizontalAxis.Length; column++)
        {
            int localColumn = column;

            var piece = _blackPieces.FirstOrDefault(x => x.StartColumn == column && x.StartRow == row);
            if (piece == null)
            {
                piece = _whitePieces.FirstOrDefault(x => x.StartColumn == column && x.StartRow == row);
            }

            Cell cell = new Cell(localRow, localColumn);

            bool canMoveHere = cellsPossible.Where(x => x.Row == cell.Row && x.Column == cell.Column).Any();

            bool thisKingIsInCheck = false;
            var king = KingPossitionEvaluate();
            if (king != null)
                thisKingIsInCheck = king.StartRow == cell.Row && king.StartColumn == cell.Column;

            <div @onclick="() => MoveOrAttackPiece(cell)" class="cell">
                <div class="@(canMoveHere ? "active-cell" : "")">
                    <div class="@(thisKingIsInCheck ? "piece check" : "")">
                    @if (piece != null)
                    {
                        <img @onclick="@(e => ClickOnPiece(e, piece))" src="@piece.Image"
                        class="piece @(piece == activePiece && piece != null ? "active" : "")" />
                    }
                    </div>
                </div>
            </div>
        }
    </div>
}
